#!/usr/bin/expect

set timeout 60
set host [lindex $argv 0]
set user [lindex $argv 1]
set password [lindex $argv 2]
set newpassword [lindex $argv 3]
set method "ssh"
set dryrun "True"

log_user 1
if { "$method" == "ssh" } {
    #send_user "spawn ssh  -o StrictHostKeyChecking=no \
    #                      -o PasswordAuthentication=yes \
    #                      -o PubkeyAuthentication=no $user@$host\n"
    set cont 0
    for { set retry 0 } { $retry < 2 } { incr retry 1 } {

        # NOTE: For unknown reason, some DRAC modules work only with
        #       stderr redirected to stdout, others only work without it.
        if { $retry == 0 } {
            spawn ssh -o StrictHostKeyChecking=no \
                      -o PasswordAuthentication=yes \
                      -o PubkeyAuthentication=no $user@$host 
        } else {
            spawn ssh -o StrictHostKeyChecking=no \
                      -o PasswordAuthentication=yes \
                      -o PubkeyAuthentication=no $user@$host 2>&1
        }

        expect {
            "Are you sure you want to continue connecting (yes/no)? " { 
                send "yes\n"; 
                exp_continue 
            }
            "password: " { 
                send "$password\n";
                exp_continue 
            }
            "Permission denied" { 
                send_user "DRAC ssh: username/password: $expect_out(0,string)";
                exit 1
            }
            "Could not resolve hostname" { 
                send_user "DRAC ssh: $expect_out(0,string)"; 
                exit 1
            }
            "Connection timed out" { 
                send_user "DRAC ssh: $expect_out(0,string)"; 
                exit 1
            }
            -re "Received disconnect.*" { 
                send_user "DRAC ssh: $expect_out(0,string)"; 
                exit 1
            }
            -re "\\$|/.*>|.*$user.*#" { 
                send "\r"; 
            } 
            timeout { 
                send_user "DRAC ssh: timeout\n" ; exit 1; }
            eof { 
                if { $cont == 1 } { 
                    send_user "DRAC ssh failed twice\n"; 
                    exit 1 
                } 
                set cont 1 
            }
        }
        if { $cont == 0 } { break; }
    }

    set var "";
    set prompt "\\$|/.*>" 
    expect -re "/.*>|\\$" { send "racadm getconfig -u $user\r"; }
    expect {
        -re "$user\r\n(.*)cfgUserAdminUserName=.*\r\n" { 
            set var [ string trim $expect_out(1,string) ]; 
            send "\r"; 
        }
        timeout { 
            send_user "TIMEOUT\n"; 
            exit 1 
        }
    }

    set l [ regexp -all -inline {cfgUserAdminIndex=(.*)} $var]
    set id [ lindex $l 1 ] 
    send_user "id: $host $user $id\n";

    if  { $id == 2 || $id == 3 } {
        expect -re "\\$|/.*>" { 
            send_user "racadm config -g cfgUserAdmin -o cfgUserAdminPassword -i $id $newpassword\r" ; 
            send "racadm config -g cfgUserAdmin -o cfgUserAdminPassword -i $id $newpassword\r" ; 
        }
    } else {
        send_user "cannot set password for user id: $id\r";
    }

    expect -re "\\$|/.*>" { send "exit\r"; } 

    expect eof { send_user "" }
}
