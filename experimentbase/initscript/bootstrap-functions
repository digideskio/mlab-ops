#!/bin/bash
set -x
set -e

# SETUP FUNCTIONS
function assert_sanity_checks () {
    # SANITY CHECKS AND ENVIRONMENT SETUP
    local given_slicename=$1

    # check default permission mask
    m=$( umask )
    if [ $m = "0000" ] ; then
        echo "Please set umask to a sensible default: i.e. umask 0022"
        exit 1
    fi

    # check for root user
    if [ $UID -ne "0" ] ; then
       echo "You must run this program with root permissions..."
       exit 1
    fi

    # check that slice name is given or saved.
    if [ -n "$given_slicename" ] && \
       [ "$given_slicename" != $( get_slice_name) ] ; then
       echo "Given slice name is different from discovered slice name!"
       exit 1
    fi

    if ! enough_disk_space ; then
        echo "There is not enough disk space to continue!"
        exit 1
    fi
}

function get_package_and_verify () {
    # filename for the publickey we will use to verify the stage2 initscript
    PUBKEY_FN=$( mktemp /tmp/publickey.XXXXXXXXXX )

    # filename for the extract stage2 initscript
    STAGE2_FN=$( mktemp /tmp/stage2-initscript.XXXXXXXXXX )

    # URL for the stage2 initscript
    STAGE2_URL="$1"
    STAGE2_FILE=$( basename $STAGE2_URL )

    # filename and URL for the signature of the stage2 initscript
    STAGE2_SIGNATURE_FN=$STAGE2_FN.sig
    STAGE2_SIGNATURE_URL=$STAGE2_URL.sig

    # create the public key file
    cat <<ZEOF > $PUBKEY_FN
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDhB8rNF0EH9DfjMw2mDGTYur/N
MmaQaiXICDaxlL1MppY9B6GFQVDbthrqM9HjBUUyDUnQ1jrOjE0II7QKeSc5Gqys
8e8S92stMzdSvtcogfhJcYElq9pCXLbzxI7xzRRoK1zEuKPz3Op5wDjUj1x8/x02
LfnWuuFYf4U5JCRoRwIDAQAB
-----END PUBLIC KEY-----
ZEOF

    DELAY=1
    RETRY=1

    while [ $RETRY -eq 1 ]; do
       # break out of loop by default
       RETRY=0

       # download the stage2 initscript
       curl -s -o $STAGE2_FN $STAGE2_URL 
       if [ ! -f $STAGE2_FN -o $? -ne 0 ]
       then
          echo "Failed to download $STAGE2_URL"
          RETRY=1
       fi

       # download the signature
       if [ $RETRY -eq 0 ]; then
          curl -s -o $STAGE2_SIGNATURE_FN $STAGE2_SIGNATURE_URL
          if [ ! -f $STAGE2_SIGNATURE_FN -o $? -ne 0 ]
          then
             echo "Failed to download $STAGE2_SIGNATURE_URL"
             RETRY=1
          fi
       fi

       # make sure the signature is correct
       if [ $RETRY -eq 0 ]; then
          # verify the signature
          RESULT=$( openssl dgst -sha256 -signature $STAGE2_SIGNATURE_FN -verify $PUBKEY_FN $STAGE2_FN )
          echo "Signature Verification: $RESULT"
          if [ "$RESULT" != "Verified OK" ]; then
             echo "OpenSSL failed to verify $STAGE2_SIGNATURE_FN"
             RETRY=1
          fi
       fi

       # if something went wrong, then retry. This covers connection errors as
       # well as problems with the stork repository itself. If the repository is
       # offline, then the script will keep retrying until it comes online.
       if [ $RETRY -eq 1 ]; then
          echo "Delaying $DELAY seconds"
          sleep $DELAY
          # exponential backoff, where the sum of all times are less than 1 hour 
          # before exiting.
          DELAY=$(( $DELAY * 2 ))
          if [ $DELAY -gt 1024 ]; then
             # ERROR
             rm -f $PUBKEY_FN
             rm -f $STAGE2_FN
             rm -f $STAGE2_SIGNATURE_FN
             rm -f $STAGE2_SIGNATURE_URL
             return 1
          fi
       fi
    done

    # NOTE: rename tmp file to proper filename
    mkdir -p $PREFIX/downloads
    cp $STAGE2_FN $PREFIX/downloads/$STAGE2_FILE 
    rm -f $PUBKEY_FN
    rm -f $STAGE2_FN
    rm -f $STAGE2_SIGNATURE_FN
    rm -f $STAGE2_SIGNATURE_URL
}

function save_etag_from_url () {
    local url=$1
    local file=$( basename $url )
    ETAG=$( get_etag_from_url $url )
    mkdir -p $PREFIX/etag/
    if [ -z "$ETAG" ] ; then
        return 1
    else
        echo $ETAG > $PREFIX/etag/$file
        return 0
    fi
}

function get_etag_from_url () {
    local url=$1
    ETAG=$( curl -s -I $url | grep ETag | awk '{print $2}' )
    if [ -z "$ETAG" ] ; then
        echo "missing-etag-from-url"
    else
        echo $ETAG
    fi
}

function get_etag_from_file () {
    local url=$1
    local file=$( basename $url )
    ETAG=$( cat $PREFIX/etag/$file 2> /dev/null )
    if [ -z "$ETAG" ] ; then
        echo "missing-etag-in-file"
    else
        echo $ETAG
    fi
}

function package_setup () {
    local url=$1
    local filename=$( basename $url )
    get_package_and_verify $url
    RETVAL=$?
    if [ $RETVAL -eq 0 ] ; then
        if unpack_and_initialize $filename ; then
            save_etag_from_url $url
        fi
    fi
}

function package_is_latest () {
    local url=$1
    local url_et=$( get_etag_from_url $url )
    local cached_et=$( get_etag_from_file $url )
    
    if test "$url_et" == "$cached_et" ; then
        return 0
    else
        return 1
    fi
}

function enough_disk_space () {
    blocks_available=$( df | grep dev | awk '{print $4}' )
    if [ $blocks_available -gt 10240 ] ; then
        # at least 10MB are available.
        return 0
    fi
    return 1
}

function unpack_and_initialize () {
    filename=$1
    cd $PREFIX
    if [ -d current ] ; then
        suffix=$( date +%Y-%m-%d-%H:%M )
        if [ -d previous-$suffix ] ; then
            suffix=${suffix}-0
        fi
        mv current previous-$suffix
    fi
    mkdir -p current
    # NOTE: -po removes the owners in the archive.
    tar -C current -po -zxf $PREFIX/downloads/$filename
    if [ -f current/init/initialize ] ; then
        cd current
        ./init/initialize
        return $?
    else
        echo "NO SUCH FILE: $PREFIX/current/init/initialize" 
        return 1
    fi
}

function update () {
    local package=$1
    echo "update $package"
    if package_is_latest $package ; then
        echo "package is latest: $package"
    else 
        echo "package is NOT latest: $package"
        package_setup $package
    fi
}

function install_file () {
    src=$1
    dst=$2
    if [ -f $src ] ; then
        cp -f $src $dst
        return $?
    fi
    return 1
}

function get_slice_name() {
	## NOTE: this will fail when there are other users in group 'slices'
	slice_gid=$( grep slices: /etc/group | sed -e 's/slices:x//g' )
	node_id=$( grep $slice_gid /etc/passwd | awk -F: '{print $1}' )
	echo $node_id
}

function get_url_for_file () {
    PACKAGE_SERVER=ks.measurementlab.net
    echo "http://$PACKAGE_SERVER/$1"
}


function assert_dir () {
    local dir=$1
    /usr/bin/test -d $dir || ( 
            echo "ERROR: No $dir!" && exit 1 )
}

function setup_crond_hourly_update () {
    # link this script to run hourly.
    CRONSCRIPT=/etc/cron.hourly/$( basename $SCRIPT )
    if [ -f $SCRIPT ] && \
       [ ! -e $CRONSCRIPT  ] ; then
        assert_dir "/etc/cron.hourly"
        ln -s $SCRIPT $CRONSCRIPT
    fi
}

function setup_crond () {
    # ENABLE CROND
    /sbin/chkconfig rsyslog on
    l=$( pgrep -f rsyslogd | wc -l )
    if [ $l -eq 0 ] ; then
        service rsyslog start 
    fi
    /sbin/chkconfig crond on
    l=$( pgrep -f crond | wc -l )
    if [ $l -eq 0 ] ; then
        # START CROND IF IT IS NOT RUNNING
        cat <<EOF > /usr/bin/fakemail.sh
#!/bin/bash
cat >> /var/log/cron.output
EOF
        chmod 755 /usr/bin/fakemail.sh
        cat <<EOF > /etc/logrotate.d/cronoutput
/var/log/cron.output {
    copytruncate
    compress
    monthly
    notifempty
    rotate 5
    missingok
}
EOF
        echo "CRONDARGS='-m /usr/bin/fakemail.sh'" > /etc/sysconfig/crond
        /sbin/service crond start
    fi
}

function reset () {
    rm -f /etc/slicename
    rm -f /etc/cron.hourly/update-manager.sh
    rm -rf $PREFIX
    rm -f /etc/rsyncd.conf
    rm -f /etc/slice-functions
    rm -f /etc/init.d/slicectrl.sh
    rm -f /etc/init.d/slicectrl-functions
    rm -rf /home/mlab_ops/current
    rm -rf /home/mlab_ops/downloads
    rm -rf /home/mlab_ops/etag
    rm -rf /home/mlab_ops/previous*
}

function initialize_for_initscript () {
    setup_crond

    ## re-run this script hourly
    assert_dir "/etc/cron.hourly"
    CRONSCRIPT=/etc/cron.hourly/$( basename $SCRIPT )
    [ ! -e $CRONSCRIPT  ] && ln -s $SCRIPT $CRONSCRIPT

    ## copy this script to a known location for other scripts to import
    [ ! -d /etc/mlab/ ] && mkdir -p /etc/mlab
    install_file $SCRIPT /etc/mlab/bootstrap-functions
}

if [ "$BASH_SOURCE" = "$0" ] ; then
    # then this script is being executed not sourced.

    PREFIX=/etc/mlab
    SCRIPT=$0
    COMMAND=$1
    SLICENAME=$2
    PACKAGE_MANAGE=$( get_url_for_file slice-management-package.tar.gz )

    if [ -z "$COMMAND" ] ; then
        # cron will pass no arguments.  The default is 'update'
        COMMAND=update
    fi

    if [ "$COMMAND" = "reset" ]; then

        reset
        exit $?

    elif [ "$COMMAND" = "start" ] ; then

        assert_sanity_checks $SLICENAME
        initialize_for_initscript
        update $PACKAGE_MANAGE
        RETVAL=$?
        exit $RETVAL

    elif [ "$COMMAND" = "update" ] ; then

        update $PACKAGE_MANAGE
        RETVAL=$?
        exit $RETVAL

    else

        echo "Unknown command: $COMMAND"
        exit 1

    fi

    echo "This should never be reached"
    exit 1
fi
